name: CI (Lint, Test, Build & Push)

on:
  push: # on push to any branch
    branches: ['**']
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'requirements*.txt'
      - 'app/**/*.py'
      - 'app/**/*.html'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/docker.yaml'
  pull_request: # on merge requests
    paths:
      - 'Dockerfile'
      - '.dockerignore'
      - 'requirements*.txt'
      - 'app/**/*.py'
      - 'app/**/*.html'
      - 'tests/**'
      - 'pyproject.toml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: orders_user
          POSTGRES_PASSWORD: ${{ secrets.ORDERS_DB_PASSWORD }}
          POSTGRES_DB: orders_db
        options: >-
          --health-cmd="pg_isready -U orders_user -d orders_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      PYTHONPATH: ${{ github.workspace }}
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_NAME: orders_db
      DB_USER: orders_user
      DB_PASSWORD: ${{ secrets.ORDERS_DB_PASSWORD }}
      PYTHONUNBUFFERED: '1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov "flake8>=7.0.0"

      - name: Lint (flake8)
        run: |
          flake8 --version
          flake8 --max-line-length=100

      - name: Run tests with coverage (pretty print)
        run: |
          pytest -q --cov=app --cov-report=term-missing:skip-covered

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint-and-test]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare variables (lowercase owner/repo, short SHA)
        id: prep
        run: |
          echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "REPO_LC=${REPO_NAME,,}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # Enable emulation so we can build arm64 on x86 runners
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.OWNER_LC }}/${{ env.REPO_LC }}
          tags: |
            type=sha,format=short,prefix=
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/heads/master') }}
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.title=${{ env.REPO_LC }}
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      # PRs: build only (multi-arch) to validate Dockerfile
      - name: Build (PR validation, no push)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: false
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version || '0.0.0-dev' }}
            VCS_REF=${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Branch/tag pushes: build & push multi-arch manifest
      - name: Build & Push (multi-arch)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version || '0.0.0-dev' }}
            VCS_REF=${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show published image references
        if: github.event_name != 'pull_request'
        shell: bash
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          OWNER_LC: ${{ env.OWNER_LC }}
          REPO_LC: ${{ env.REPO_LC }}
          SHORT_SHA: ${{ env.SHORT_SHA }}
        run: |
          echo "Published tags for ghcr.io/${OWNER_LC}/${REPO_LC}:"
          printf '%s\n' "$TAGS"
          echo
          echo "Pull examples:"
          echo "docker pull ghcr.io/${OWNER_LC}/${REPO_LC}:${SHORT_SHA}"
          if grep -qE 'ghcr\.io/.+/:latest' <<< "$TAGS"; then
            echo "docker pull ghcr.io/${OWNER_LC}/${REPO_LC}:latest"
          fi
